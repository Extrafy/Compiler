# LLVM to Mips 
.macro putstr
	li	$v0,	4
	syscall
.end_macro

.macro putint
	li	$v0,	1
	syscall
.end_macro

.macro getint
	li	$v0,	5
	syscall
.end_macro

.macro putchar
	li	$v0,	11
	syscall
.end_macro

.macro getchar
	li	$v0,	12
	syscall
.end_macro

.data
const_int_a:
.word	0

const_int_b1:
.word	1

const_int_b2:
.word	0
.word	1
.word	2
.word	3
.word	4

str:
.word	104
.word	101
.word	108
.word	108
.word	111
.word	33
.word	0
.word	0
.word	0
.word	0

char_a:
.word	97

char_b1:
.word	98

char_b2:
.word	97
.word	98
.word	99
.word	100
.word	101

char_b3:
.word	119
.word	111
.word	114
.word	108
.word	100
.word	33
.word	0
.word	0
.word	0
.word	0

int_b2:
.space	20

_str_0:
.asciiz	"test_stmt_getint_getchar_printf\00"

_str_1:
.asciiz	"test_Lval_exp success!\n"

_str_2:
.asciiz	"test_primary_exp success!\n"

_str_3:
.asciiz	"test_unary_exp success!\n"

_str_4:
.asciiz	"test_mul_exp success!\n"

_str_5:
.asciiz	"test_add_exp_success!\n"

_str_6:
.asciiz	"test_rel_exp success!\n"

_str_7:
.asciiz	"test_Eqexp success!\n"

_str_8:
.asciiz	"test_Lexp success!\n"

_str_9:
.asciiz	"22371236\n"

.text
main:
	add	$sp,	$sp,	-4
b0_83:
	la	$a3,	_str_9
	addiu	$a0,	$a3,	0
	addiu	$a0,	$a0,	0
	move	$a0,	$a0
	putstr
	jal	test
	li	$v0,	0
	add	$sp, 	$sp,	4
	li	$v0,	10
	syscall

print_int_arr:
	sw	$t7,	-4($sp)
	sw	$s3,	-8($sp)
	sw	$s5,	-12($sp)
	sw	$t8,	-16($sp)
	add	$sp,	$sp,	-28
b2_0:
	move	$a1,	$a1
	move	$a0,	$a0
	addiu	$s3,	$sp,	0
	sw	$a0,	0($s3)
	addiu	$t8,	$sp,	4
	sw	$a1,	0($t8)
	addiu	$t7,	$sp,	8
	sw	$zero,	0($t7)
	sw	$zero,	0($t7)
b6_1:
	lw	$s5,	0($t7)
	lw	$a3,	0($t8)
	blt	$s5,	$a3,	b10_2
b18_4:
	li	$a0,	10
	putchar
	add	$sp, 	$sp,	28
	lw	$t7,	-4($sp)
	lw	$s3,	-8($sp)
	lw	$s5,	-12($sp)
	lw	$t8,	-16($sp)
	jr	$ra
b10_2:
	lw	$a3,	0($t7)
	lw	$s5,	0($s3)
	sll	$a3,	$a3,	2
	addu	$a3,	$s5,	$a3
	lw	$a3,	0($a3)
	move	$a0,	$a3
	putint
	li	$a0,	32
	putchar
b15_3:
	lw	$a3,	0($t7)
	addiu	$a3,	$a3,	1
	sw	$a3,	0($t7)
	j	b6_1

test_stmt_1_3:
b0_5:
	la	$a3,	char_a
	sw	$s5,	0($a3)
	li	$a3,	2
		jr	$ra

test_stmt_if_else:
b0_6:
	li	$a3,	1
	blt	$a3,	2,	b2_7
b3_8:
	li	$a3,	1
	bgt	$a3,	2,	b5_9
b6_10:
b7_11:
		jr	$ra
b5_9:
	j	b7_11
b2_7:
	j	b3_8

test_stmt_for_break_continue:
	sw	$t7,	-4($sp)
	sw	$s5,	-8($sp)
	sw	$t8,	-12($sp)
	add	$sp,	$sp,	-20
b0_12:
	addiu	$s5,	$sp,	0
	sw	$zero,	0($s5)
	addiu	$t7,	$sp,	4
	li	$a3,	1
	sw	$a3,	0($t7)
	sw	$zero,	0($s5)
b3_13:
	lw	$a3,	0($s5)
	lw	$t8,	0($t7)
	blt	$a3,	$t8,	b7_14
b13_16:
	sw	$zero,	0($s5)
b14_17:
	lw	$a3,	0($s5)
	lw	$t8,	0($t7)
	blt	$a3,	$t8,	b18_18
b22_20:
	sw	$zero,	0($s5)
b23_21:
b24_22:
b28_24:
	sw	$zero,	0($s5)
b29_25:
	lw	$t8,	0($s5)
	lw	$a3,	0($t7)
	blt	$t8,	$a3,	b33_26
b37_28:
b38_29:
b39_30:
b43_32:
	sw	$zero,	0($s5)
b44_33:
	lw	$a3,	0($s5)
	lw	$t7,	0($t7)
	blt	$a3,	$t7,	b48_34
b50_36:
	sw	$zero,	0($s5)
b51_37:
b52_38:
b54_40:
b55_41:
b56_42:
b58_44:
	add	$sp, 	$sp,	20
	lw	$t7,	-4($sp)
	lw	$s5,	-8($sp)
	lw	$t8,	-12($sp)
	jr	$ra
b48_34:
	j	b50_36
b33_26:
	lw	$a3,	0($s5)
	addiu	$a3,	$a3,	1
	sw	$a3,	0($s5)
b36_27:
	j	b29_25
b18_18:
b19_19:
	lw	$a3,	0($s5)
	addiu	$a3,	$a3,	1
	sw	$a3,	0($s5)
	j	b14_17
b7_14:
	lw	$a3,	0($s5)
	addiu	$a3,	$a3,	1
	sw	$a3,	0($s5)
b10_15:
	lw	$a3,	0($s5)
	addiu	$a3,	$a3,	1
	sw	$a3,	0($s5)
	j	b3_13

test_stmt_return_null:
b0_45:
		jr	$ra

test_stmt_return_exp:
b0_46:
	li	$v0,	1
		jr	$ra

test_stmt_getint_getchar_printf:
	sw	$t7,	-4($sp)
	sw	$t8,	-8($sp)
	add	$sp,	$sp,	-16
b0_47:
	addiu	$t8,	$sp,	0
	li	$t7,	1
	sw	$t7,	0($t8)
	addiu	$t7,	$sp,	4
	sw	$a3,	0($t7)
	getint
	move	$v0,	$v0
	sw	$v0,	0($t8)
	getchar
	move	$a3,	$v0
	sw	$a3,	0($t7)
	la	$a3,	_str_0
	addiu	$a0,	$a3,	0
	addiu	$a0,	$a0,	0
	move	$a0,	$a0
	putstr
	move	$a0,	$s5
	putchar
	move	$a0,	$s5
	putchar
	move	$a0,	$s5
	putchar
	move	$a0,	$s5
	putchar
	move	$a0,	$s5
	putchar
	move	$a0,	$s5
	putchar
	move	$a0,	$s5
	putchar
	li	$a0,	10
	putchar
	add	$sp, 	$sp,	16
	lw	$t7,	-4($sp)
	lw	$t8,	-8($sp)
	jr	$ra

test_block:
b0_48:
		jr	$ra

add_int:
	sw	$s5,	-4($sp)
	add	$sp,	$sp,	-12
b2_49:
	move	$a1,	$a1
	move	$a0,	$a0
	addiu	$a3,	$sp,	0
	sw	$a0,	0($a3)
	addiu	$s5,	$sp,	4
	sw	$a1,	0($s5)
	lw	$a3,	0($a3)
	lw	$s5,	0($s5)
	addu	$a3,	$a3,	$s5
	move	$v0,	$a3
	add	$sp, 	$sp,	12
	lw	$s5,	-4($sp)
	jr	$ra

read_char:
	sw	$s5,	-4($sp)
	add	$sp,	$sp,	-8
b1_50:
	move	$a3,	$a0
	addiu	$s5,	$sp,	0
	sw	$a3,	0($s5)
	lw	$v0,	0($s5)
	move	$v0,	$v0
	add	$sp, 	$sp,	8
	lw	$s5,	-4($sp)
	jr	$ra

test_Lval_exp:
b0_51:
	la	$a3,	const_int_a
	lw	$a3,	0($a3)
	la	$a3,	char_a
	lw	$a3,	0($a3)
	la	$a3,	char_b2
	addiu	$a3,	$a3,	0
	addiu	$a3,	$a3,	0
	lw	$a3,	0($a3)
	la	$a3,	_str_1
	addiu	$a0,	$a3,	0
	addiu	$a0,	$a0,	0
	move	$a0,	$a0
	putstr
		jr	$ra

test_primary_exp:
b0_52:
	la	$a3,	char_a
	lw	$a3,	0($a3)
	la	$a3,	_str_2
	addiu	$a0,	$a3,	0
	addiu	$a0,	$a0,	0
	move	$a0,	$a0
	putstr
		jr	$ra

test_func_int:
	add	$sp,	$sp,	-4
b1_53:
	move	$a0,	$a0
	addiu	$a3,	$sp,	0
	sw	$a0,	0($a3)
	add	$sp, 	$sp,	4
	jr	$ra

test_func_int_arr:
	add	$sp,	$sp,	-4
b1_54:
	move	$a0,	$a0
	addiu	$a3,	$sp,	0
	sw	$a0,	0($a3)
	add	$sp, 	$sp,	4
	jr	$ra

test_func_mul_int:
	sw	$s5,	-4($sp)
	add	$sp,	$sp,	-12
b2_55:
	move	$a1,	$a1
	move	$a3,	$a0
	addiu	$s5,	$sp,	0
	sw	$a3,	0($s5)
	addiu	$a3,	$sp,	4
	sw	$a1,	0($a3)
	add	$sp, 	$sp,	12
	lw	$s5,	-4($sp)
	jr	$ra

test_unary_exp:
	sw	$ra,	-4($sp)
	add	$sp,	$sp,	-4
b0_56:
	li	$a0,	0
	jal	test_func_int
	la	$a3,	int_b2
	addiu	$a3,	$a3,	0
	addiu	$a3,	$a3,	0
	lw	$a0,	0($a3)
	move	$a0,	$a0
	jal	test_func_int
	la	$a3,	int_b2
	addiu	$a0,	$a3,	0
	addiu	$a0,	$a0,	0
	move	$a0,	$a0
	jal	test_func_int_arr
	li	$a0,	0
	li	$a1,	1
	jal	test_func_mul_int
	li	$a3,	-1
	li	$a3,	1
	beq	$a3,	0,	b6_57
b7_58:
	la	$a3,	_str_3
	addiu	$a3,	$a3,	0
	addiu	$a3,	$a3,	0
	move	$a0,	$a3
	putstr
	add	$sp, 	$sp,	4
	lw	$ra,	-4($sp)
	jr	$ra
b6_57:
	j	b7_58

test_mul_exp:
b0_59:
	li	$a3,	1
	sll	$a3,	$a3,	0
	li	$a3,	1
	move	$zero,	$zero
	la	$a3,	_str_4
	addiu	$a3,	$a3,	0
	addiu	$a3,	$a3,	0
	move	$a0,	$a3
	putstr
		jr	$ra

test_add_exp:
b0_60:
	li	$a3,	2
	li	$a3,	0
	la	$a3,	_str_5
	addiu	$a0,	$a3,	0
	addiu	$a0,	$a0,	0
	move	$a0,	$a0
	putstr
		jr	$ra

test_rel_exp:
b0_61:
	li	$a3,	1
	blt	$a3,	2,	b2_62
b3_63:
	li	$a3,	1
	bgt	$a3,	2,	b5_64
b6_65:
	li	$a3,	1
	ble	$a3,	2,	b8_66
b9_67:
	li	$a3,	1
	bge	$a3,	2,	b11_68
b12_69:
	la	$a3,	_str_6
	addiu	$a0,	$a3,	0
	addiu	$a0,	$a0,	0
	move	$a0,	$a0
	putstr
		jr	$ra
b11_68:
	j	b12_69
b8_66:
	j	b9_67
b5_64:
	j	b6_65
b2_62:
	j	b3_63

test_Eqexp:
b0_70:
	li	$a3,	1
	beq	$a3,	1,	b2_71
b3_72:
	li	$a3,	1
	bne	$a3,	1,	b5_73
b6_74:
	la	$a3,	_str_7
	addiu	$a0,	$a3,	0
	addiu	$a0,	$a0,	0
	move	$a0,	$a0
	putstr
		jr	$ra
b5_73:
	j	b6_74
b2_71:
	j	b3_72

test_Lexp:
b0_75:
	li	$a3,	1
	bne	$a3,	0,	b5_78
b3_77:
	li	$a3,	1
	bne	$a3,	0,	b7_79
b10_81:
	li	$a3,	1
	bne	$a3,	0,	b7_79
b8_80:
	la	$a3,	_str_8
	addiu	$a0,	$a3,	0
	addiu	$a0,	$a0,	0
	move	$a0,	$a0
	putstr
		jr	$ra
b7_79:
	j	b8_80
b5_78:
	li	$a3,	1
	bne	$a3,	0,	b2_76
	j	b3_77
b2_76:
	j	b3_77

test:
	sw	$ra,	-4($sp)
	add	$sp,	$sp,	-4
b0_82:
	jal	test_stmt_1_3
	jal	test_stmt_for_break_continue
	jal	test_stmt_getint_getchar_printf
	jal	test_stmt_if_else
	jal	test_stmt_return_exp
	move	$v0,	$v0
	jal	test_stmt_return_null
	jal	test_Eqexp
	jal	test_Lval_exp
	jal	test_add_exp
	jal	test_mul_exp
	jal	test_primary_exp
	jal	test_rel_exp
	jal	test_unary_exp
	add	$sp, 	$sp,	4
	lw	$ra,	-4($sp)
	jr	$ra


