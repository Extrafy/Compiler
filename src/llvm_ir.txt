@const_int_a = constant i32 0
@const_int_b1 = constant i32 1
@const_int_b2 = constant [5 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4]
@str = constant [10 x i8] [i8 104, i8 101, i8 108, i8 108, i8 111, i8 33, i8 0, i8 0, i8 0, i8 0]
@char_a = global i8 97
@char_b1 = global i8 98
@char_b2 = global [5 x i8] [i8 97, i8 98, i8 99, i8 100, i8 101]
@char_b3 = global [10 x i8] [i8 119, i8 111, i8 114, i8 108, i8 100, i8 33, i8 0, i8 0, i8 0, i8 0]
@int_b2 = global [5 x i32] zeroinitializer
@_str_0 = constant [32 x i8] c"test_stmt_getint_getchar_printf\00"
@_str_1 = constant [24 x i8] c"test_Lval_exp success!\0a\00"
@_str_2 = constant [27 x i8] c"test_primary_exp success!\0a\00"
@_str_3 = constant [25 x i8] c"test_unary_exp success!\0a\00"
@_str_4 = constant [23 x i8] c"test_mul_exp success!\0a\00"
@_str_5 = constant [23 x i8] c"test_add_exp_success!\0a\00"
@_str_6 = constant [23 x i8] c"test_rel_exp success!\0a\00"
@_str_7 = constant [21 x i8] c"test_Eqexp success!\0a\00"
@_str_8 = constant [20 x i8] c"test_Lexp success!\0a\00"
@_str_9 = constant [10 x i8] c"22371236\0a\00"

declare i32 @getint()

declare i32 @getchar()

declare void @putint(i32)

declare void @putchar(i32)

declare void @putstr(i8*)

define dso_local void @print_int_arr(i32*, i32){
;<label>:2:
	%3 = alloca i32*
	store i32* %0, i32** %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = alloca i32
	store i32 0, i32* %5
	store i32 0, i32* %5
	br label %6

;<label>:6:
	%7 = load i32, i32* %5
	%8 = load i32, i32* %4
	%9 = icmp slt i32 %7, %8
	br i1 %9, label %10, label %18

;<label>:10:
	%11 = load i32, i32* %5
	%12 = load i32*, i32** %3
	%13 = getelementptr i32, i32* %12, i32 %11
	%14 = load i32, i32* %13
	call void @putint(i32 %14)
	call void @putchar(i32 32)
	br label %15

;<label>:15:
	%16 = load i32, i32* %5
	%17 = add i32 %16, 1
	store i32 %17, i32* %5
	br label %6

;<label>:18:
	call void @putchar(i32 10)
	ret void
}

define dso_local void @test_stmt_1_3(){
;<label>:0:
	store i8 65, i8* @char_a
	%1 = add i32 1, 1
	ret void
}

define dso_local void @test_stmt_if_else(){
;<label>:0:
	%1 = icmp slt i32 1, 2
	br i1 %1, label %2, label %3

;<label>:2:
	br label %3

;<label>:3:
	%4 = icmp sgt i32 1, 2
	br i1 %4, label %5, label %6

;<label>:5:
	br label %7

;<label>:6:
	br label %7

;<label>:7:
	ret void
}

define dso_local void @test_stmt_for_break_continue(){
;<label>:0:
	%1 = alloca i32
	store i32 0, i32* %1
	%2 = alloca i32
	store i32 1, i32* %2
	store i32 0, i32* %1
	br label %3

;<label>:3:
	%4 = load i32, i32* %1
	%5 = load i32, i32* %2
	%6 = icmp slt i32 %4, %5
	br i1 %6, label %7, label %13

;<label>:7:
	%8 = load i32, i32* %1
	%9 = add i32 %8, 1
	store i32 %9, i32* %1
	br label %10

;<label>:10:
	%11 = load i32, i32* %1
	%12 = add i32 %11, 1
	store i32 %12, i32* %1
	br label %3

;<label>:13:
	store i32 0, i32* %1
	br label %14

;<label>:14:
	%15 = load i32, i32* %1
	%16 = load i32, i32* %2
	%17 = icmp slt i32 %15, %16
	br i1 %17, label %18, label %22

;<label>:18:
	br label %19

;<label>:19:
	%20 = load i32, i32* %1
	%21 = add i32 %20, 1
	store i32 %21, i32* %1
	br label %14

;<label>:22:
	store i32 0, i32* %1
	br label %23

;<label>:23:
	br label %24

;<label>:24:
	br label %28

;<label>:25:
	%26 = load i32, i32* %1
	%27 = add i32 %26, 1
	store i32 %27, i32* %1
	br label %23

;<label>:28:
	store i32 0, i32* %1
	br label %29

;<label>:29:
	%30 = load i32, i32* %1
	%31 = load i32, i32* %2
	%32 = icmp slt i32 %30, %31
	br i1 %32, label %33, label %37

;<label>:33:
	%34 = load i32, i32* %1
	%35 = add i32 %34, 1
	store i32 %35, i32* %1
	br label %36

;<label>:36:
	br label %29

;<label>:37:
	br label %38

;<label>:38:
	br label %39

;<label>:39:
	br label %43

;<label>:40:
	%41 = load i32, i32* %1
	%42 = add i32 %41, 1
	store i32 %42, i32* %1
	br label %38

;<label>:43:
	store i32 0, i32* %1
	br label %44

;<label>:44:
	%45 = load i32, i32* %1
	%46 = load i32, i32* %2
	%47 = icmp slt i32 %45, %46
	br i1 %47, label %48, label %50

;<label>:48:
	br label %50

;<label>:49:
	br label %44

;<label>:50:
	store i32 0, i32* %1
	br label %51

;<label>:51:
	br label %52

;<label>:52:
	br label %54

;<label>:53:
	br label %51

;<label>:54:
	br label %55

;<label>:55:
	br label %56

;<label>:56:
	br label %58

;<label>:57:
	br label %55

;<label>:58:
	ret void
}

define dso_local void @test_stmt_return_null(){
;<label>:0:
	ret void
}

define dso_local i32 @test_stmt_return_exp(){
;<label>:0:
	ret i32 1
}

define dso_local void @test_stmt_getint_getchar_printf(){
;<label>:0:
	%1 = alloca i32
	store i32 1, i32* %1
	%2 = alloca i8
	store i8 97, i8* %2
	%3 = call i32 @getint()
	store i32 %3, i32* %1
	%4 = call i32 @getchar()
	%5 = trunc i32 %4 to i8
	store i8 %5, i8* %2
	%6 = getelementptr inbounds [32 x i8], [32 x i8]* @_str_0, i32 0, i32 0
	call void @putstr(i8* %6)
	%7 = zext i8 115 to i32
	call void @putchar(i32 %7)
	%8 = zext i8 117 to i32
	call void @putchar(i32 %8)
	%9 = zext i8 99 to i32
	call void @putchar(i32 %9)
	%10 = zext i8 99 to i32
	call void @putchar(i32 %10)
	%11 = zext i8 101 to i32
	call void @putchar(i32 %11)
	%12 = zext i8 115 to i32
	call void @putchar(i32 %12)
	%13 = zext i8 115 to i32
	call void @putchar(i32 %13)
	call void @putchar(i32 10)
	ret void
}

define dso_local void @test_block(){
;<label>:0:
	ret void
}

define dso_local i32 @add_int(i32, i32){
;<label>:2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = add i32 %5, %6
	ret i32 %7
}

define dso_local i8 @read_char(i8){
;<label>:1:
	%2 = alloca i8
	store i8 %0, i8* %2
	%3 = load i8, i8* %2
	ret i8 %3
}

define dso_local void @test_Lval_exp(){
;<label>:0:
	%1 = load i32, i32* @const_int_a
	%2 = load i8, i8* @char_a
	%3 = getelementptr inbounds [5 x i8], [5 x i8]* @char_b2, i32 0, i8 0
	%4 = load i8, i8* %3
	%5 = getelementptr inbounds [24 x i8], [24 x i8]* @_str_1, i32 0, i32 0
	call void @putstr(i8* %5)
	ret void
}

define dso_local void @test_primary_exp(){
;<label>:0:
	%1 = load i8, i8* @char_a
	%2 = getelementptr inbounds [27 x i8], [27 x i8]* @_str_2, i32 0, i32 0
	call void @putstr(i8* %2)
	ret void
}

define dso_local void @test_func_int(i32){
;<label>:1:
	%2 = alloca i32
	store i32 %0, i32* %2
	ret void
}

define dso_local void @test_func_int_arr(i32*){
;<label>:1:
	%2 = alloca i32*
	store i32* %0, i32** %2
	ret void
}

define dso_local void @test_func_mul_int(i32, i32){
;<label>:2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	ret void
}

define dso_local void @test_unary_exp(){
;<label>:0:
	call void @test_func_int(i32 0)
	%1 = getelementptr [5 x i32], [5 x i32]* @int_b2, i32 0, i32 0
	%2 = load i32, i32* %1
	call void @test_func_int(i32 %2)
	%3 = getelementptr [5 x i32], [5 x i32]* @int_b2, i32 0, i32 0
	call void @test_func_int_arr(i32* %3)
	call void @test_func_mul_int(i32 0, i32 1)
	%4 = sub i32 0, 1
	%5 = icmp eq i32 1, 0
	br i1 %5, label %6, label %7

;<label>:6:
	br label %7

;<label>:7:
	%8 = getelementptr inbounds [25 x i8], [25 x i8]* @_str_3, i32 0, i32 0
	call void @putstr(i8* %8)
	ret void
}

define dso_local void @test_mul_exp(){
;<label>:0:
	%1 = mul i32 1, 1
	%2 = sdiv i32 1, 1
	%3 = srem i32 1, 1
	%4 = getelementptr inbounds [23 x i8], [23 x i8]* @_str_4, i32 0, i32 0
	call void @putstr(i8* %4)
	ret void
}

define dso_local void @test_add_exp(){
;<label>:0:
	%1 = add i32 1, 1
	%2 = sub i32 1, 1
	%3 = getelementptr inbounds [23 x i8], [23 x i8]* @_str_5, i32 0, i32 0
	call void @putstr(i8* %3)
	ret void
}

define dso_local void @test_rel_exp(){
;<label>:0:
	%1 = icmp slt i32 1, 2
	br i1 %1, label %2, label %3

;<label>:2:
	br label %3

;<label>:3:
	%4 = icmp sgt i32 1, 2
	br i1 %4, label %5, label %6

;<label>:5:
	br label %6

;<label>:6:
	%7 = icmp sle i32 1, 2
	br i1 %7, label %8, label %9

;<label>:8:
	br label %9

;<label>:9:
	%10 = icmp sge i32 1, 2
	br i1 %10, label %11, label %12

;<label>:11:
	br label %12

;<label>:12:
	%13 = getelementptr inbounds [23 x i8], [23 x i8]* @_str_6, i32 0, i32 0
	call void @putstr(i8* %13)
	ret void
}

define dso_local void @test_Eqexp(){
;<label>:0:
	%1 = icmp eq i32 1, 1
	br i1 %1, label %2, label %3

;<label>:2:
	br label %3

;<label>:3:
	%4 = icmp ne i32 1, 1
	br i1 %4, label %5, label %6

;<label>:5:
	br label %6

;<label>:6:
	%7 = getelementptr inbounds [21 x i8], [21 x i8]* @_str_7, i32 0, i32 0
	call void @putstr(i8* %7)
	ret void
}

define dso_local void @test_Lexp(){
;<label>:0:
	%1 = icmp ne i32 1, 0
	br i1 %1, label %5, label %3

;<label>:2:
	br label %3

;<label>:3:
	%4 = icmp ne i32 1, 0
	br i1 %4, label %7, label %10

;<label>:5:
	%6 = icmp ne i32 1, 0
	br i1 %6, label %2, label %3

;<label>:7:
	br label %8

;<label>:8:
	%9 = getelementptr inbounds [20 x i8], [20 x i8]* @_str_8, i32 0, i32 0
	call void @putstr(i8* %9)
	ret void

;<label>:10:
	%11 = icmp ne i32 1, 0
	br i1 %11, label %7, label %8
}

define dso_local void @test(){
;<label>:0:
	call void @test_stmt_1_3()
	call void @test_stmt_for_break_continue()
	call void @test_stmt_getint_getchar_printf()
	call void @test_stmt_if_else()
	%1 = call i32 @test_stmt_return_exp()
	call void @test_stmt_return_null()
	call void @test_Eqexp()
	call void @test_Lval_exp()
	call void @test_add_exp()
	call void @test_mul_exp()
	call void @test_primary_exp()
	call void @test_rel_exp()
	call void @test_unary_exp()
	ret void
}

define dso_local i32 @main(){
;<label>:0:
	%1 = getelementptr inbounds [10 x i8], [10 x i8]* @_str_9, i32 0, i32 0
	call void @putstr(i8* %1)
	call void @test()
	ret i32 0
}


