@const_var1 = constant i32 17
@const_var2 = constant i32 3
@arr = constant [3 x i32] zeroinitializer
@const_var3 = constant i32 0
@s = constant [5 x i8] zeroinitializer
@str = global [5 x i8] zeroinitializer
@cot_var1 = constant i32 20
@var1 = global i32 5
@var2 = global i32 2
@var3 = global i32 10
@var4 = global i32 7
@var5 = global i32 8
@_str_0 = constant [10 x i8] c"22371491\0a\00"
@_str_1 = constant [6 x i8] c"pass\0a\00"
@_str_2 = constant [8 x i8] c"failed\0a\00"

declare i32 @getint()

declare i32 @getchar()

declare void @putint(i32)

declare void @putch(i32)

declare void @putstr(i8*)

define dso_local i32 @f3(i32*, i32*, i32, i32){
;<label>:4:
	%5 = alloca i32*
	store i32* %0, i32** %5
	%6 = alloca i32*
	store i32* %1, i32** %6
	%7 = alloca i32
	store i32 %2, i32* %7
	%8 = alloca i32
	store i32 %3, i32* %8
	%9 = alloca i32
	store i32 0, i32* %9
	br label %10

;<label>:10:
	%11 = load i32, i32* %9
	%12 = icmp eq i32 %11, 0
	br i1 %12, label %13, label %20

;<label>:13:
	%14 = load i32, i32* %7
	%15 = load i32, i32* %8
	%16 = add i32 %14, %15
	store i32 %16, i32* %7
	br label %10

;<label>:17:
	%18 = load i32, i32* %9
	%19 = add i32 %18, 1
	store i32 %19, i32* %9
	br label %10

;<label>:20:
	%21 = load i32, i32* %9
	%22 = load i32*, i32** %5
	%23 = getelementptr i32, i32* %22, i32 %21
	%24 = load i32, i32* %23
	%25 = load i32, i32* %9
	%26 = load i32*, i32** %6
	%27 = getelementptr i32, i32* %26, i32 %25
	%28 = load i32, i32* %27
	%29 = load i32, i32* %7
	%30 = add i32 %28, %29
	%31 = mul i32 %24, %30
	%32 = load i32, i32* %8
	%33 = sub i32 %31, %32
	ret i32 %33
}

define dso_local i32 @f4(i32, i32){
;<label>:2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = add i32 %5, %6
	ret i32 %7
}

define dso_local i8 @f5(i8, i8){
;<label>:2:
	%3 = alloca i8
	store i8 %0, i8* %3
	%4 = alloca i8
	store i8 %1, i8* %4
	%5 = load i8, i8* %3
	%6 = load i8, i8* %4
	%7 = add i32 %5, %6
	ret i8 %7
}

define dso_local i32 @f7(i32){
;<label>:1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	ret i32 %3
}

define dso_local i8 @f8(i8){
;<label>:1:
	%2 = alloca i8
	store i8 %0, i8* %2
	%3 = load i8, i8* %2
	ret i8 %3
}

define dso_local i32 @f6(){
;<label>:0:
	ret i32 0
}

define dso_local void @f2(i32){
;<label>:1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	call void @putint(i32 %3)
	call void @putch(i32 10)
	ret void
}

define dso_local void @f9(){
;<label>:0:
	ret void
}

define dso_local i32 @main(){
;<label>:0:
	%1 = getelementptr inbounds [10 x i8], [10 x i8]* @_str_0, i32 0, i32 0
	call void @putstr(i8* %1)
	%2 = alloca i32
	store i32 0, i32* %2
	call void @f9()
	%3 = alloca i32
	store i32 1, i32* %3
	%4 = alloca [3 x i32]
	%5 = alloca [3 x i32]
	%6 = alloca [3 x i32]
	%7 = getelementptr [3 x i32], [3 x i32]* %5, i32 0, i32 0
	%8 = getelementptr [3 x i32], [3 x i32]* %6, i32 0, i32 0
	%9 = load i32, i32* %2
	%10 = load i32, i32* %3
	%11 = call i32 @f3(i32* %7, i32* %8, i32 %9, i32 %10)
	%12 = alloca i32
	store i32 %11, i32* %12
	%13 = alloca i32
	store i32 1, i32* %13
	%14 = alloca i8
	store i8 'c', i8* %14
	%15 = call i8 @f8(i8 'c')
	store i8 %15, i8* %14
	%16 = load i32, i32* %2
	%17 = load i32, i32* %13
	%18 = add i32 %16, %17
	%19 = load i32, i32* %13
	%20 = add i32 %18, %19
	%21 = add i32 %20, 10
	store i32 %21, i32* %2
	%22 = load i32, i32* %2
	%23 = sub i32 0, %22
	store i32 %23, i32* %2
	%24 = load i32, i32* %2
	%25 = sub i32 0, %24
	%26 = load i32, i32* %2
	%27 = load i32, i32* %2
	%28 = sdiv i32 %27, 2
	store i32 %28, i32* %2
	%29 = load i32, i32* %2
	%30 = srem i32 %29, 2
	store i32 %30, i32* %2
	%31 = load i32, i32* %2
	%32 = icmp eq i32 %31, 0
	br i1 %32, label %33, label %34

;<label>:33:
	br label %34

;<label>:34:
	%35 = call i8 @f5(i8 'g', i8 'f')
	store i8 %35, i8* %14
	%36 = load i32, i32* %2
	%37 = add i32 %36, 1
	%38 = alloca i32
	store i32 %37, i32* %38
	%39 = load i32, i32* %2
	store i32 %39, i32* %38
	%40 = call i32 @getchar()
	store i32 %40, i8* %14
	%41 = alloca i32
	store i32 4, i32* %41
	%42 = alloca i32
	store i32 1, i32* %42
	%43 = alloca i32
	%44 = call i32 @f7(i32 0)
	store i32 %44, i32* %43
	%45 = call i32 @getint()
	store i32 %45, i32* %42
	%46 = load i32, i32* %2
	%47 = load i32, i32* %41
	%48 = call i32 @f4(i32 %46, i32 %47)
	store i32 %48, i32* %42
	store i32 0, i32* %43
	br label %49

;<label>:49:
	%50 = load i32, i32* %43
	%51 = load i32, i32* %41
	%52 = icmp slt i32 %50, %51
	br i1 %52, label %53, label %74

;<label>:53:
	%54 = load i32, i32* %2
	%55 = sub i32 0, 1
	%56 = mul i32 %54, %55
	%57 = load i32, i32* %41
	%58 = load i32, i32* %43
	%59 = add i32 %58, 1
	%60 = sdiv i32 %57, %59
	%61 = srem i32 %60, 2
	%62 = add i32 %56, %61
	%63 = load i32, i32* %13
	%64 = sub i32 0, 3
	%65 = sub i32 0, %64
	%66 = sdiv i32 %63, %65
	%67 = add i32 %62, %66
	store i32 %67, i32* %42
	%68 = load i32, i32* %42
	call void @putint(i32 %68)
	call void @putch(i32 10)
	%69 = load i32, i32* %42
	%70 = icmp sgt i32 %69, 0
	br i1 %70, label %75, label %77

;<label>:71:
	%72 = load i32, i32* %43
	%73 = add i32 %72, 1
	store i32 %73, i32* %43
	br label %49

;<label>:74:
	store i32 0, i32* %43
	br label %85

;<label>:75:
	%76 = getelementptr inbounds [6 x i8], [6 x i8]* @_str_1, i32 0, i32 0
	call void @putstr(i8* %76)
	br label %79

;<label>:77:
	%78 = getelementptr inbounds [8 x i8], [8 x i8]* @_str_2, i32 0, i32 0
	call void @putstr(i8* %78)
	br label %79

;<label>:79:
	%80 = load i32, i32* %43
	%81 = icmp sge i32 %80, 0
	br i1 %81, label %82, label %83

;<label>:82:
	br label %49

;<label>:83:
	br label %74

;<label>:84:
	br label %49

;<label>:85:
	%86 = load i32, i32* %43
	%87 = load i32, i32* %41
	%88 = icmp slt i32 %86, %87
	br i1 %88, label %89, label %93

;<label>:89:
	br label %93

;<label>:90:
	%91 = load i32, i32* %43
	%92 = add i32 %91, 1
	store i32 %92, i32* %43
	br label %85

;<label>:93:
	store i32 0, i32* %43
	br label %94

;<label>:94:
	br label %95

;<label>:95:
	br label %99

;<label>:96:
	%97 = load i32, i32* %43
	%98 = add i32 %97, 1
	store i32 %98, i32* %43
	br label %94

;<label>:99:
	store i32 0, i32* %43
	br label %100

;<label>:100:
	%101 = load i32, i32* %43
	%102 = load i32, i32* %41
	%103 = icmp slt i32 %101, %102
	br i1 %103, label %104, label %106

;<label>:104:
	br label %106

;<label>:105:
	br label %100

;<label>:106:
	br label %107

;<label>:107:
	br label %108

;<label>:108:
	br label %112

;<label>:109:
	%110 = load i32, i32* %43
	%111 = add i32 %110, 1
	store i32 %111, i32* %43
	br label %107

;<label>:112:
	br label %113

;<label>:113:
	%114 = load i32, i32* %43
	%115 = load i32, i32* %41
	%116 = icmp slt i32 %114, %115
	br i1 %116, label %117, label %119

;<label>:117:
	br label %119

;<label>:118:
	br label %113

;<label>:119:
	store i32 0, i32* %43
	br label %120

;<label>:120:
	br label %121

;<label>:121:
	br label %123

;<label>:122:
	br label %120

;<label>:123:
	br label %124

;<label>:124:
	br label %125

;<label>:125:
	br label %127

;<label>:126:
	br label %124

;<label>:127:
	%128 = icmp eq i32 0, 0
	br i1 %128, label %129, label %130

;<label>:129:
	br label %131

;<label>:130:
	br label %131

;<label>:131:
	%132 = load i32, i32* %41
	%133 = load i32, i32* %2
	%134 = icmp sge i32 %132, %133
	br i1 %134, label %135, label %136

;<label>:135:
	br label %136

;<label>:136:
	%137 = load i32, i32* %41
	%138 = load i32, i32* %2
	%139 = icmp sle i32 %137, %138
	br i1 %139, label %140, label %141

;<label>:140:
	br label %141

;<label>:141:
	%142 = load i32, i32* %41
	%143 = load i32, i32* %2
	%144 = icmp eq i32 %142, %143
	br i1 %144, label %145, label %146

;<label>:145:
	br label %146

;<label>:146:
	%147 = load i32, i32* %41
	%148 = load i32, i32* %2
	%149 = icmp sgt i32 %147, %148
	br i1 %149, label %150, label %151

;<label>:150:
	br label %151

;<label>:151:
	%152 = load i32, i32* %41
	%153 = load i32, i32* %2
	%154 = icmp slt i32 %152, %153
	br i1 %154, label %155, label %156

;<label>:155:
	br label %156

;<label>:156:
	%157 = load i32, i32* %41
	%158 = load i32, i32* %2
	%159 = icmp ne i32 %157, %158
	br i1 %159, label %160, label %161

;<label>:160:
	br label %161

;<label>:161:
	%162 = call i32 @f6()
	%163 = icmp eq i32 0, 0
	br i1 %163, label %164, label %165

;<label>:164:
	call void @f2(i32 1)
	br label %165

;<label>:165:
	%166 = icmp ne i32 0, 0
	br i1 %166, label %170, label %168

;<label>:167:
	br label %168

;<label>:168:
	%169 = icmp ne i32 1, 0
	br i1 %169, label %174, label %181

;<label>:170:
	%171 = load i32, i32* %41
	%172 = load i32, i32* %2
	%173 = icmp ne i32 %171, %172
	br i1 %173, label %167, label %168

;<label>:174:
	br label %175

;<label>:175:
	%176 = load i32, i32* %41
	%177 = icmp eq i32 %176, 0
	%178 = load i32, i32* %2
	%179 = zext i1 %177 to i32
	%180 = icmp eq i32 %179, %178
	br i1 %180, label %184, label %186

;<label>:181:
	%182 = load i32, i32* %2
	%183 = icmp sgt i32 %182, 0
	br i1 %183, label %174, label %175

;<label>:184:
	br label %185

;<label>:185:
	ret i32 0

;<label>:186:
	%187 = load i32, i32* %2
	%188 = icmp sgt i32 %187, 0
	br i1 %188, label %189, label %185

;<label>:189:
	%190 = icmp eq i32 1, 1
	br i1 %190, label %191, label %185

;<label>:191:
	%192 = load i32, i32* %41
	%193 = add i32 %192, 1
	%194 = srem i32 %193, 2
	%195 = sdiv i32 %194, 2
	%196 = icmp ne i32 %195, 0
	br i1 %196, label %184, label %185
}


