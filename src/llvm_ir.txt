@MAXINT = constant i32 2147483647
@MININT = global i32 -2147483647
@MAXCHAR = constant i8 126
@MINCHAR = global i8 32
@ZERO = constant i32 0
@ONE = constant i32 1
@TWO = constant i32 2
@THREE = constant i32 3
@FOUR = constant i32 4
@FIVE = constant i32 5
@SIX = constant i32 6
@SEVEN = constant i32 7
@EIGHT = constant i32 8
@NINE = constant i32 9
@TEN = constant i32 10
@ZERO_TO_TEN = constant [11 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10]
@NO_USE1 = constant [11 x i32] zeroinitializer
@NO_USE2 = constant [11 x i32] [i32 0, i32 1, i32 2, i32 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0]
@A = constant i8 65
@B = constant i8 66
@C = constant i8 67
@D = constant i8 68
@E = constant i8 69
@F = constant i8 70
@G = constant i8 71
@H = constant i8 72
@I = constant i8 73
@J = constant i8 74
@ABCDEFGHIJ = constant [11 x i8] [i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 0]
@NO_USE3 = constant [11 x i8] zeroinitializer
@NO_USE4 = constant [11 x i8] [i8 78, i8 79, i8 95, i8 85, i8 83, i8 69, i8 52, i8 0, i8 0, i8 0, i8 0]
@fibonacci = global [15 x i32] zeroinitializer
@_str_0 = constant [17 x i8] c"Fibonacci Array \00"
@_str_1 = constant [4 x i8] c" : \00"
@_str_2 = constant [3 x i8] c"  \00"
@_str_3 = constant [10 x i8] c"22371298\0a\00"
@_str_4 = constant [3 x i8] c"a\0a\00"

declare i32 @getint()

declare i32 @getchar()

declare void @putint(i32)

declare void @putch(i32)

declare void @putstr(i8*)

define dso_local void @cal_fibonacci(){
;<label>:0:
	%1 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 1
	store i32 1, i32* %1
	%2 = alloca i32
	store i32 2, i32* %2
	br label %3

;<label>:3:
	%4 = load i32, i32* %2
	%5 = icmp slt i32 %4, 15
	br i1 %5, label %6, label %21

;<label>:6:
	%7 = load i32, i32* %2
	%8 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %7
	%9 = load i32, i32* %2
	%10 = sub i32 %9, 1
	%11 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %10
	%12 = load i32, i32* %11
	%13 = load i32, i32* %2
	%14 = sub i32 %13, 2
	%15 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %14
	%16 = load i32, i32* %15
	%17 = add i32 %12, %16
	store i32 %17, i32* %8
	br label %18

;<label>:18:
	%19 = load i32, i32* %2
	%20 = add i32 %19, 1
	store i32 %20, i32* %2
	br label %3

;<label>:21:
	ret void
}

define dso_local void @print_fibonacci_n(i32, i32, i32){
;<label>:3:
	%4 = alloca i32
	store i32 %0, i32* %4
	%5 = alloca i32
	store i32 %1, i32* %5
	%6 = alloca i32
	store i32 %2, i32* %6
	%7 = load i32, i32* %4
	%8 = load i32, i32* %4
	%9 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %8
	%10 = load i32, i32* %9
	%11 = load i32, i32* %5
	%12 = load i32, i32* %5
	%13 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %12
	%14 = load i32, i32* %13
	%15 = load i32, i32* %6
	%16 = load i32, i32* %6
	%17 = getelementptr [15 x i32], [15 x i32]* @fibonacci, i32 0, i32 %16
	%18 = load i32, i32* %17
	%19 = getelementptr inbounds [17 x i8], [17 x i8]* @_str_0, i32 0, i32 0
	call void @putstr(i8* %19)
	call void @putint(i32 %7)
	%20 = getelementptr inbounds [4 x i8], [4 x i8]* @_str_1, i32 0, i32 0
	call void @putstr(i8* %20)
	call void @putint(i32 %10)
	%21 = getelementptr inbounds [3 x i8], [3 x i8]* @_str_2, i32 0, i32 0
	call void @putstr(i8* %21)
	call void @putint(i32 %11)
	%22 = getelementptr inbounds [4 x i8], [4 x i8]* @_str_1, i32 0, i32 0
	call void @putstr(i8* %22)
	call void @putint(i32 %14)
	%23 = getelementptr inbounds [3 x i8], [3 x i8]* @_str_2, i32 0, i32 0
	call void @putstr(i8* %23)
	call void @putint(i32 %15)
	%24 = getelementptr inbounds [4 x i8], [4 x i8]* @_str_1, i32 0, i32 0
	call void @putstr(i8* %24)
	call void @putint(i32 %18)
	call void @putch(i32 10)
	ret void
}

define dso_local i32 @main(){
;<label>:0:
	%1 = getelementptr inbounds [10 x i8], [10 x i8]* @_str_3, i32 0, i32 0
	call void @putstr(i8* %1)
	%2 = alloca i32
	%3 = call i32 @getint()
	store i32 %3, i32* %2
	%4 = alloca i32
	%5 = call i32 @getint()
	store i32 %5, i32* %4
	%6 = alloca i32
	%7 = call i32 @getint()
	store i32 %7, i32* %6
	call void @cal_fibonacci()
	%8 = load i32, i32* %2
	%9 = icmp sgt i32 %8, 14
	br i1 %9, label %10, label %15

;<label>:10:
	br label %21

;<label>:11:
	%12 = load i32, i32* %2
	%13 = load i32, i32* %4
	%14 = load i32, i32* %6
	call void @print_fibonacci_n(i32 %12, i32 %13, i32 %14)
	br label %21

;<label>:15:
	%16 = load i32, i32* %4
	%17 = icmp sgt i32 %16, 14
	br i1 %17, label %10, label %18

;<label>:18:
	%19 = load i32, i32* %6
	%20 = icmp sgt i32 %19, 14
	br i1 %20, label %10, label %11

;<label>:21:
	%22 = alloca i32
	%23 = load i32, i32* @MAXINT
	store i32 %23, i32* %22
	%24 = alloca i32
	%25 = load i32, i32* @TEN
	%26 = getelementptr [11 x i32], [11 x i32]* @ZERO_TO_TEN, i32 0, i32 %25
	%27 = load i32, i32* %26
	store i32 %27, i32* %24
	%28 = alloca i32
	store i32 1, i32* %28
	br label %29

;<label>:29:
	%30 = load i32, i32* %28
	%31 = icmp slt i32 %30, 2
	br i1 %31, label %32, label %37

;<label>:32:
	%33 = load i32, i32* %28
	call void @putint(i32 %33)
	call void @putch(i32 10)
	br label %34

;<label>:34:
	%35 = load i32, i32* %28
	%36 = add i32 %35, 1
	store i32 %36, i32* %28
	br label %29

;<label>:37:
	store i32 2, i32* %28
	br label %38

;<label>:38:
	br label %39

;<label>:39:
	%40 = load i32, i32* %28
	%41 = icmp eq i32 %40, 5
	br i1 %41, label %46, label %48

;<label>:42:
	%43 = load i32, i32* %28
	%44 = add i32 %43, 1
	store i32 %44, i32* %28
	br label %38

;<label>:45:
	store i32 2, i32* %28
	br label %60

;<label>:46:
	br label %45

;<label>:47:
	br label %42

;<label>:48:
	%49 = load i32, i32* %28
	%50 = icmp sle i32 %49, 6
	br i1 %50, label %46, label %51

;<label>:51:
	%52 = load i32, i32* %28
	%53 = icmp sge i32 %52, 90
	br i1 %53, label %46, label %54

;<label>:54:
	%55 = load i32, i32* %28
	%56 = icmp eq i32 %55, 100
	br i1 %56, label %46, label %57

;<label>:57:
	%58 = load i32, i32* %28
	%59 = icmp ne i32 %58, 80
	br i1 %59, label %46, label %47

;<label>:60:
	%61 = load i32, i32* %28
	%62 = icmp sle i32 %61, 5
	br i1 %62, label %63, label %67

;<label>:63:
	%64 = load i32, i32* %28
	%65 = icmp ne i32 %64, 90
	br i1 %65, label %68, label %69

;<label>:66:
	br label %60

;<label>:67:
	store i32 100, i32* %28
	br label %70

;<label>:68:
	br label %67

;<label>:69:
	br label %66

;<label>:70:
	br label %71

;<label>:71:
	%72 = load i32, i32* %28
	%73 = icmp sgt i32 %72, 10
	br i1 %73, label %78, label %79

;<label>:74:
	%75 = load i32, i32* %28
	%76 = add i32 %75, 1
	store i32 %76, i32* %28
	br label %70

;<label>:77:
	br label %80

;<label>:78:
	br label %77

;<label>:79:
	br label %74

;<label>:80:
	%81 = load i32, i32* %28
	%82 = icmp sgt i32 %81, 50
	br i1 %82, label %83, label %87

;<label>:83:
	%84 = load i32, i32* %28
	%85 = icmp sgt i32 %84, 80
	br i1 %85, label %93, label %90

;<label>:86:
	br label %80

;<label>:87:
	store i32 100, i32* %28
	br label %97

;<label>:88:
	br label %87

;<label>:89:
	br label %86

;<label>:90:
	%91 = load i32, i32* %28
	%92 = icmp eq i32 %91, 100
	br i1 %92, label %88, label %89

;<label>:93:
	%94 = load i32, i32* %28
	%95 = icmp slt i32 %94, 120
	br i1 %95, label %88, label %90

;<label>:96:
	br label %86

;<label>:97:
	br label %98

;<label>:98:
	%99 = load i32, i32* %28
	%100 = icmp eq i32 %99, 100
	br i1 %100, label %103, label %104

;<label>:101:
	br label %97

;<label>:102:
	br label %106

;<label>:103:
	br label %102

;<label>:104:
	br label %101

;<label>:105:
	br label %101

;<label>:106:
	br label %107

;<label>:107:
	%108 = icmp ne i32 1, 0
	br i1 %108, label %121, label %122

;<label>:109:
	br label %106

;<label>:110:
	%111 = alloca i8
	%112 = call i32 @getchar()
	%113 = trunc i32 %112 to i8
	store i8 %113, i8* %111
	%114 = getelementptr inbounds [3 x i8], [3 x i8]* @_str_4, i32 0, i32 0
	call void @putstr(i8* %114)
	%115 = getelementptr inbounds [3 x i8], [3 x i8]* @_str_4, i32 0, i32 0
	call void @putstr(i8* %115)
	%116 = getelementptr inbounds [3 x i8], [3 x i8]* @_str_4, i32 0, i32 0
	call void @putstr(i8* %116)
	%117 = getelementptr inbounds [3 x i8], [3 x i8]* @_str_4, i32 0, i32 0
	call void @putstr(i8* %117)
	%118 = getelementptr inbounds [3 x i8], [3 x i8]* @_str_4, i32 0, i32 0
	call void @putstr(i8* %118)
	%119 = getelementptr inbounds [3 x i8], [3 x i8]* @_str_4, i32 0, i32 0
	call void @putstr(i8* %119)
	%120 = getelementptr inbounds [3 x i8], [3 x i8]* @_str_4, i32 0, i32 0
	call void @putstr(i8* %120)
	ret i32 0

;<label>:121:
	br label %110

;<label>:122:
	br label %109
}


