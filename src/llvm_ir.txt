@_str_0 = constant [3 x i8] c"0\0a\00"
@_str_1 = constant [10 x i8] c"19182620\0a\00"

declare i32 @getint()

declare i32 @getchar()

declare void @putint(i32)

declare void @putchar(i32)

declare void @putstr(i8*)

define dso_local void @de(){
;<label>:0:
	ret void
}

define dso_local i32 @keke(i32, i32){
;<label>:2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = add i32 %5, %6
	store i32 %7, i32* %3
	ret i32 0
}

define dso_local i32 @jian(){
;<label>:0:
	%1 = alloca i32
	%2 = alloca i32
	%3 = alloca i32
	%4 = call i32 @getint()
	store i32 %4, i32* %1
	%5 = call i32 @getint()
	store i32 %5, i32* %2
	%6 = load i32, i32* %1
	%7 = load i32, i32* %2
	%8 = sub i32 %6, %7
	store i32 %8, i32* %3
	%9 = load i32, i32* %3
	ret i32 %9
}

define dso_local i32 @main(){
;<label>:0:
	%1 = alloca i32
	%2 = alloca i32
	%3 = alloca i32
	%4 = alloca i32
	%5 = alloca i32
	%6 = alloca i32
	%7 = alloca i32
	store i32 1, i32* %7
	%8 = alloca i32
	%9 = alloca i32
	%10 = alloca i32
	%11 = alloca i32
	%12 = sub i32 0, 1
	%13 = alloca i32
	store i32 %12, i32* %13
	%14 = alloca i32
	store i32 2, i32* %14
	%15 = alloca i32
	%16 = alloca i32
	%17 = alloca i32
	store i32 0, i32* %17
	%18 = call i32 @getint()
	store i32 %18, i32* %15
	br label %19

;<label>:19:
	%20 = load i32, i32* %14
	%21 = load i32, i32* %15
	%22 = icmp slt i32 %20, %21
	br i1 %22, label %23, label %32

;<label>:23:
	%24 = load i32, i32* %15
	%25 = load i32, i32* %14
	%26 = sdiv i32 %24, %25
	%27 = mul i32 %26, %25
	%28 = sub i32 %24, %27
	store i32 %28, i32* %16
	%29 = load i32, i32* %16
	%30 = icmp eq i32 %29, 0
	br i1 %30, label %41, label %43

;<label>:31:
	br label %19

;<label>:32:
	%33 = call i32 @jian()
	store i32 %33, i32* %3
	%34 = load i32, i32* %3
	call void @putint(i32 %34)
	call void @putchar(i32 10)
	%35 = load i32, i32* %3
	%36 = add i32 %35, 1
	store i32 %36, i32* %4
	%37 = load i32, i32* %3
	%38 = mul i32 %37, 2
	store i32 %38, i32* %5
	%39 = load i32, i32* %5
	%40 = icmp slt i32 %39, 5
	br i1 %40, label %46, label %51

;<label>:41:
	store i32 1, i32* %17
	%42 = getelementptr inbounds [3 x i8], [3 x i8]* @_str_0, i32 0, i32 0
	call void @putstr(i8* %42)
	br label %43

;<label>:43:
	%44 = load i32, i32* %14
	%45 = add i32 %44, 1
	store i32 %45, i32* %14
	br label %31

;<label>:46:
	%47 = load i32, i32* %3
	%48 = sdiv i32 %47, 2
	%49 = mul i32 %48, 2
	%50 = sub i32 %47, %49
	store i32 %50, i32* %6
	br label %54

;<label>:51:
	%52 = load i32, i32* %3
	%53 = sdiv i32 %52, 2
	store i32 %53, i32* %6
	br label %54

;<label>:54:
	%55 = load i32, i32* %6
	%56 = icmp eq i32 3, 0
	%57 = zext i1 %56 to i32
	%58 = icmp ne i32 %55, %57
	br i1 %58, label %59, label %62

;<label>:59:
	%60 = load i32, i32* %7
	%61 = add i32 %60, 1
	store i32 %61, i32* %7
	br label %62

;<label>:62:
	%63 = load i32, i32* %14
	%64 = load i32, i32* %9
	%65 = add i32 %64, 1
	%66 = add i32 %63, %65
	store i32 %66, i32* %13
	br label %67

;<label>:67:
	%68 = icmp ne i32 0, 0
	br i1 %68, label %69, label %71

;<label>:69:
	br label %70

;<label>:70:
	br label %67

;<label>:71:
	br label %72

;<label>:72:
	%73 = icmp ne i32 1, 0
	br i1 %73, label %74, label %76

;<label>:74:
	br label %76

;<label>:75:
	br label %72

;<label>:76:
	%77 = load i32, i32* %3
	%78 = load i32, i32* %4
	%79 = icmp eq i32 %77, %78
	br i1 %79, label %80, label %100

;<label>:80:
	%81 = load i32, i32* %4
	%82 = load i32, i32* %5
	%83 = icmp sge i32 %81, %82
	br i1 %83, label %84, label %99

;<label>:84:
	%85 = load i32, i32* %5
	%86 = load i32, i32* %6
	%87 = icmp sle i32 %85, %86
	br i1 %87, label %88, label %98

;<label>:88:
	%89 = load i32, i32* %6
	%90 = load i32, i32* %7
	%91 = icmp ne i32 %89, %90
	br i1 %91, label %92, label %97

;<label>:92:
	%93 = load i32, i32* %3
	%94 = icmp sgt i32 %93, 1
	br i1 %94, label %95, label %96

;<label>:95:
	store i32 1, i32* %1
	br label %96

;<label>:96:
	br label %97

;<label>:97:
	br label %98

;<label>:98:
	br label %99

;<label>:99:
	br label %100

;<label>:100:
	%101 = load i32, i32* %1
	%102 = load i32, i32* %2
	%103 = call i32 @keke(i32 %101, i32 %102)
	%104 = load i32, i32* %4
	%105 = load i32, i32* %5
	%106 = load i32, i32* %6
	%107 = load i32, i32* %7
	call void @putint(i32 %104)
	call void @putchar(i32 10)
	call void @putint(i32 %105)
	call void @putchar(i32 10)
	call void @putint(i32 %106)
	call void @putchar(i32 10)
	call void @putint(i32 %107)
	call void @putchar(i32 10)
	%108 = getelementptr inbounds [10 x i8], [10 x i8]* @_str_1, i32 0, i32 0
	call void @putstr(i8* %108)
	%109 = getelementptr inbounds [10 x i8], [10 x i8]* @_str_1, i32 0, i32 0
	call void @putstr(i8* %109)
	%110 = getelementptr inbounds [10 x i8], [10 x i8]* @_str_1, i32 0, i32 0
	call void @putstr(i8* %110)
	ret i32 0
}


