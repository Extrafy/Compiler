@const_var1 = constant i32 17
@const_var2 = constant i32 3
@arr = constant [3 x i32] [i32 1, i32 2, i32 3]
@const_var3 = constant i8 99
@s = constant [5 x i8] [i8 97, i8 98, i8 99, i8 100, i8 0]
@str = global [5 x i8] [i8 97, i8 98, i8 99, i8 100, i8 0]
@cot_var1 = constant i32 20
@var1 = global i32 5
@var2 = global i32 2
@var3 = global i32 10
@var4 = global i8 7
@var5 = global i8 8
@_str_0 = constant [10 x i8] c"22371491\0a\00"
@_str_1 = constant [6 x i8] c"pass\0a\00"
@_str_2 = constant [8 x i8] c"failed\0a\00"

declare i32 @getint()

declare i32 @getchar()

declare void @putint(i32)

declare void @putch(i32)

declare void @putstr(i8*)

define dso_local i32 @f3(i32*, i32*, i32, i32){
;<label>:4:
	%5 = alloca i32*
	store i32* %0, i32** %5
	%6 = alloca i32*
	store i32* %1, i32** %6
	%7 = alloca i32
	store i32 %2, i32* %7
	%8 = alloca i32
	store i32 %3, i32* %8
	%9 = alloca i32
	store i32 0, i32* %9
	br label %10

;<label>:10:
	%11 = load i32, i32* %9
	%12 = icmp eq i32 %11, 0
	br i1 %12, label %13, label %20

;<label>:13:
	%14 = load i32, i32* %7
	%15 = load i32, i32* %8
	%16 = add i32 %14, %15
	store i32 %16, i32* %7
	br label %17

;<label>:17:
	%18 = load i32, i32* %9
	%19 = add i32 %18, 1
	store i32 %19, i32* %9
	br label %10

;<label>:20:
	%21 = load i32, i32* %9
	%22 = load i32*, i32** %5
	%23 = getelementptr i32, i32* %22, i32 %21
	%24 = load i32, i32* %23
	%25 = load i32, i32* %9
	%26 = load i32*, i32** %6
	%27 = getelementptr i32, i32* %26, i32 %25
	%28 = load i32, i32* %27
	%29 = load i32, i32* %7
	%30 = add i32 %28, %29
	%31 = mul i32 %24, %30
	%32 = load i32, i32* %8
	%33 = sub i32 %31, %32
	ret i32 %33
}

define dso_local i32 @f4(i32, i32){
;<label>:2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = add i32 %5, %6
	ret i32 %7
}

define dso_local i8 @f5(i8, i8){
;<label>:2:
	%3 = alloca i8
	store i8 %0, i8* %3
	%4 = alloca i8
	store i8 %1, i8* %4
	%5 = load i8, i8* %3
	%6 = load i8, i8* %4
	%7 = zext i8 %5 to i32
	%8 = zext i8 %6 to i32
	%9 = add i32 %7, %8
	%10 = trunc i32 %9 to i8
	ret i8 %10
}

define dso_local i32 @f7(i32){
;<label>:1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	ret i32 %3
}

define dso_local i8 @f8(i8){
;<label>:1:
	%2 = alloca i8
	store i8 %0, i8* %2
	%3 = load i8, i8* %2
	ret i8 %3
}

define dso_local i32 @f6(){
;<label>:0:
	ret i32 0
}

define dso_local void @f2(i32){
;<label>:1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	call void @putint(i32 %3)
	call void @putch(i32 10)
	ret void
}

define dso_local void @f9(){
;<label>:0:
	ret void
}

define dso_local i32 @main(){
;<label>:0:
	%1 = getelementptr inbounds [10 x i8], [10 x i8]* @_str_0, i32 0, i32 0
	call void @putstr(i8* %1)
	%2 = alloca i32
	store i32 0, i32* %2
	call void @f9()
	%3 = alloca i32
	store i32 1, i32* %3
	%4 = alloca [3 x i32]
	%5 = alloca [3 x i32]
	%6 = getelementptr [3 x i32], [3 x i32]* %5, i32 0, i32 0
	store i32 1, i32* %6
	%7 = getelementptr [3 x i32], [3 x i32]* %5, i32 0, i32 1
	store i32 2, i32* %7
	%8 = getelementptr [3 x i32], [3 x i32]* %5, i32 0, i32 2
	store i32 3, i32* %8
	%9 = alloca [3 x i32]
	%10 = getelementptr [3 x i32], [3 x i32]* %9, i32 0, i32 0
	store i32 4, i32* %10
	%11 = getelementptr [3 x i32], [3 x i32]* %9, i32 0, i32 1
	store i32 5, i32* %11
	%12 = getelementptr [3 x i32], [3 x i32]* %9, i32 0, i32 2
	store i32 6, i32* %12
	%13 = getelementptr [3 x i32], [3 x i32]* %5, i32 0, i32 0
	%14 = getelementptr [3 x i32], [3 x i32]* %9, i32 0, i32 0
	%15 = load i32, i32* %2
	%16 = load i32, i32* %3
	%17 = call i32 @f3(i32* %13, i32* %14, i32 %15, i32 %16)
	%18 = alloca i32
	store i32 %17, i32* %18
	%19 = alloca i32
	store i32 1, i32* %19
	%20 = alloca i8
	store i8 99, i8* %20
	%21 = call i8 @f8(i8 99)
	store i8 %21, i8* %20
	%22 = load i32, i32* %2
	%23 = load i32, i32* %19
	%24 = add i32 %22, %23
	%25 = load i32, i32* %19
	%26 = add i32 %24, %25
	%27 = add i32 %26, 10
	store i32 %27, i32* %2
	%28 = load i32, i32* %2
	%29 = sub i32 0, %28
	store i32 %29, i32* %2
	%30 = load i32, i32* %2
	%31 = sub i32 0, %30
	%32 = load i32, i32* %2
	%33 = load i32, i32* %2
	%34 = sdiv i32 %33, 2
	store i32 %34, i32* %2
	%35 = load i32, i32* %2
	%36 = srem i32 %35, 2
	store i32 %36, i32* %2
	%37 = load i32, i32* %2
	%38 = icmp eq i32 %37, 0
	br i1 %38, label %39, label %40

;<label>:39:
	br label %40

;<label>:40:
	%41 = call i8 @f5(i8 103, i8 102)
	store i8 %41, i8* %20
	%42 = load i32, i32* %2
	%43 = add i32 %42, 1
	%44 = alloca i32
	store i32 %43, i32* %44
	%45 = load i32, i32* %2
	store i32 %45, i32* %44
	%46 = call i32 @getchar()
	%47 = trunc i32 %46 to i8
	store i8 %47, i8* %20
	%48 = alloca i32
	store i32 4, i32* %48
	%49 = alloca i32
	store i32 1, i32* %49
	%50 = alloca i32
	%51 = call i32 @f7(i32 0)
	store i32 %51, i32* %50
	%52 = call i32 @getint()
	store i32 %52, i32* %49
	%53 = load i32, i32* %2
	%54 = load i32, i32* %48
	%55 = call i32 @f4(i32 %53, i32 %54)
	store i32 %55, i32* %49
	store i32 0, i32* %50
	br label %56

;<label>:56:
	%57 = load i32, i32* %50
	%58 = load i32, i32* %48
	%59 = icmp slt i32 %57, %58
	br i1 %59, label %60, label %81

;<label>:60:
	%61 = load i32, i32* %2
	%62 = sub i32 0, 1
	%63 = mul i32 %61, %62
	%64 = load i32, i32* %48
	%65 = load i32, i32* %50
	%66 = add i32 %65, 1
	%67 = sdiv i32 %64, %66
	%68 = srem i32 %67, 2
	%69 = add i32 %63, %68
	%70 = load i32, i32* %19
	%71 = sub i32 0, 3
	%72 = sub i32 0, %71
	%73 = sdiv i32 %70, %72
	%74 = add i32 %69, %73
	store i32 %74, i32* %49
	%75 = load i32, i32* %49
	call void @putint(i32 %75)
	call void @putch(i32 10)
	%76 = load i32, i32* %49
	%77 = icmp sgt i32 %76, 0
	br i1 %77, label %82, label %84

;<label>:78:
	%79 = load i32, i32* %50
	%80 = add i32 %79, 1
	store i32 %80, i32* %50
	br label %56

;<label>:81:
	store i32 0, i32* %50
	br label %92

;<label>:82:
	%83 = getelementptr inbounds [6 x i8], [6 x i8]* @_str_1, i32 0, i32 0
	call void @putstr(i8* %83)
	br label %86

;<label>:84:
	%85 = getelementptr inbounds [8 x i8], [8 x i8]* @_str_2, i32 0, i32 0
	call void @putstr(i8* %85)
	br label %86

;<label>:86:
	%87 = load i32, i32* %50
	%88 = icmp sge i32 %87, 0
	br i1 %88, label %89, label %90

;<label>:89:
	br label %78

;<label>:90:
	br label %81

;<label>:91:
	br label %78

;<label>:92:
	%93 = load i32, i32* %50
	%94 = load i32, i32* %48
	%95 = icmp slt i32 %93, %94
	br i1 %95, label %96, label %100

;<label>:96:
	br label %100

;<label>:97:
	%98 = load i32, i32* %50
	%99 = add i32 %98, 1
	store i32 %99, i32* %50
	br label %92

;<label>:100:
	store i32 0, i32* %50
	br label %101

;<label>:101:
	br label %102

;<label>:102:
	br label %106

;<label>:103:
	%104 = load i32, i32* %50
	%105 = add i32 %104, 1
	store i32 %105, i32* %50
	br label %101

;<label>:106:
	store i32 0, i32* %50
	br label %107

;<label>:107:
	%108 = load i32, i32* %50
	%109 = load i32, i32* %48
	%110 = icmp slt i32 %108, %109
	br i1 %110, label %111, label %113

;<label>:111:
	br label %113

;<label>:112:
	br label %107

;<label>:113:
	br label %114

;<label>:114:
	br label %115

;<label>:115:
	br label %119

;<label>:116:
	%117 = load i32, i32* %50
	%118 = add i32 %117, 1
	store i32 %118, i32* %50
	br label %114

;<label>:119:
	br label %120

;<label>:120:
	%121 = load i32, i32* %50
	%122 = load i32, i32* %48
	%123 = icmp slt i32 %121, %122
	br i1 %123, label %124, label %126

;<label>:124:
	br label %126

;<label>:125:
	br label %120

;<label>:126:
	store i32 0, i32* %50
	br label %127

;<label>:127:
	br label %128

;<label>:128:
	br label %130

;<label>:129:
	br label %127

;<label>:130:
	br label %131

;<label>:131:
	br label %132

;<label>:132:
	br label %134

;<label>:133:
	br label %131

;<label>:134:
	%135 = icmp eq i32 0, 0
	br i1 %135, label %136, label %137

;<label>:136:
	br label %138

;<label>:137:
	br label %138

;<label>:138:
	%139 = load i32, i32* %48
	%140 = load i32, i32* %2
	%141 = icmp sge i32 %139, %140
	br i1 %141, label %142, label %143

;<label>:142:
	br label %143

;<label>:143:
	%144 = load i32, i32* %48
	%145 = load i32, i32* %2
	%146 = icmp sle i32 %144, %145
	br i1 %146, label %147, label %148

;<label>:147:
	br label %148

;<label>:148:
	%149 = load i32, i32* %48
	%150 = load i32, i32* %2
	%151 = icmp eq i32 %149, %150
	br i1 %151, label %152, label %153

;<label>:152:
	br label %153

;<label>:153:
	%154 = load i32, i32* %48
	%155 = load i32, i32* %2
	%156 = icmp sgt i32 %154, %155
	br i1 %156, label %157, label %158

;<label>:157:
	br label %158

;<label>:158:
	%159 = load i32, i32* %48
	%160 = load i32, i32* %2
	%161 = icmp slt i32 %159, %160
	br i1 %161, label %162, label %163

;<label>:162:
	br label %163

;<label>:163:
	%164 = load i32, i32* %48
	%165 = load i32, i32* %2
	%166 = icmp ne i32 %164, %165
	br i1 %166, label %167, label %168

;<label>:167:
	br label %168

;<label>:168:
	%169 = call i32 @f6()
	%170 = icmp eq i32 0, 0
	br i1 %170, label %171, label %172

;<label>:171:
	call void @f2(i32 1)
	br label %172

;<label>:172:
	%173 = icmp ne i32 0, 0
	br i1 %173, label %177, label %175

;<label>:174:
	br label %175

;<label>:175:
	%176 = icmp ne i32 1, 0
	br i1 %176, label %181, label %188

;<label>:177:
	%178 = load i32, i32* %48
	%179 = load i32, i32* %2
	%180 = icmp ne i32 %178, %179
	br i1 %180, label %174, label %175

;<label>:181:
	br label %182

;<label>:182:
	%183 = load i32, i32* %48
	%184 = icmp eq i32 %183, 0
	%185 = load i32, i32* %2
	%186 = zext i1 %184 to i32
	%187 = icmp eq i32 %186, %185
	br i1 %187, label %191, label %193

;<label>:188:
	%189 = load i32, i32* %2
	%190 = icmp sgt i32 %189, 0
	br i1 %190, label %181, label %182

;<label>:191:
	br label %192

;<label>:192:
	ret i32 0

;<label>:193:
	%194 = load i32, i32* %2
	%195 = icmp sgt i32 %194, 0
	br i1 %195, label %196, label %192

;<label>:196:
	%197 = icmp eq i32 1, 1
	br i1 %197, label %198, label %192

;<label>:198:
	%199 = load i32, i32* %48
	%200 = add i32 %199, 1
	%201 = srem i32 %200, 2
	%202 = sdiv i32 %201, 2
	%203 = icmp ne i32 %202, 0
	br i1 %203, label %191, label %192
}


